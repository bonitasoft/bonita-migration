//clean old build files
rootDir.listFiles(new FilenameFilter() {
    @Override
    boolean accept(File file, String s) {
        return s.startsWith("build@")
    }
}).each { GFileUtils.deleteDirectory(it) }

//determine path to use for steps
def sourceGlobalVersion = System.getProperty("source.version")
def targetGlobalVersion = System.getProperty("target.version")
//steps available version on filesystem
def availableVersions = new File("../bonita-migration-distrib/src/main/resources/versions").listFiles(new FilenameFilter() {
    @Override
    boolean accept(File file, String s) {
        def version = new File(file, s)
        if(version.isDirectory()){
            return version.getName().equals(targetGlobalVersion) || new File(new File(version,"Bonita-home"),"bonita").exists();
        }
        return false;
    }
}).collect {
    it.name
}
availableVersions.sort()
if ((!sourceGlobalVersion.equals("6.0.2") && !availableVersions.contains(sourceGlobalVersion)) || !availableVersions.contains(targetGlobalVersion)) {
    throw new IllegalArgumentException("Migration is unknown : source=" + sourceGlobalVersion + ", target=" + targetGlobalVersion + ", availableVersions=" + availableVersions)
}

//create a project for each migration step to test
def steps = [];
for (int i = availableVersions.indexOf(sourceGlobalVersion) + 1; i <= availableVersions.indexOf(targetGlobalVersion); i++) {
    def source
    if (i == 0) {
        source = "6.0.2"
    } else {
        source = availableVersions[i - 1]
    }
    def target = availableVersions[i]
    steps.add("build@" + source + "-" + target)
}
//copy src and lib
def stepSrcDir = new File(rootDir, "src")
def stepLibDir = new File(rootDir, "lib")
steps.each {
    def stepDir = new File(rootDir, it)
    copyDirectory(stepSrcDir, new File(stepDir, "src"))
    copyDirectory(stepLibDir, new File(stepDir, "lib"))
    GFileUtils.copyFile(new File(rootDir, "logback.xml"), new File(stepDir, "logback.xml"))
    GFileUtils.copyFile(new File(rootDir, "init-sqlserver.sql"), new File(stepDir, "init-sqlserver.sql"))

}
println "executing steps $steps"
def String[] finalSteps = steps.collect{ it };
//include these steps
include finalSteps

def copyDirectory(final File srcDir, final File destDir) throws IOException {
    final File[] srcFiles = srcDir.listFiles();
    if (destDir.exists()) {
        if (!destDir.isDirectory()) {
            throw new IOException("Destination '" + destDir + "' exists but is not a directory");
        }
    } else {
        if (!destDir.mkdirs() && !destDir.isDirectory()) {
            throw new IOException("Destination '" + destDir + "' directory cannot be created");
        }
    }
    for (final File srcFile : srcFiles) {
        final File dstFile = new File(destDir, srcFile.getName());
        if (srcFile.isDirectory()) {
            copyDirectory(srcFile, dstFile);
        } else {
            GFileUtils.copyFile(srcFile, dstFile);
        }
    }
}
