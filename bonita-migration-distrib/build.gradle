buildscript {
    repositories {
        mavenLocal()
    }
    dependencies {
        classpath group: 'org.bonitasoft.migration.plugin', name: 'bonita-migration-plugins',
                version: '1.0-SNAPSHOT'
    }
}

apply plugin: 'application'
apply plugin: 'clean-db'
apply plugin: 'migration-dist'





configurations {
    filler
    bonitaVersions.collect { "config_$it" }.each { create it }
    drivers
}

repositories {
    mavenLocal()
    def customMavenRepo = System.getProperty("maven.repository")
    //used in jenkins: add in system property $ {JENKINS_HOME}/userContent/m2_repo and archiva
    if (customMavenRepo != null) {
        println "using custom maven.repository: " + customMavenRepo
        maven { url customMavenRepo }
    }
    mavenCentral()
}
dependencies {
    compile gradleApi()
    filler "org.bonitasoft.engine:bonita-client:${source}"
    filler "org.bonitasoft.engine:bonita-home:${source}"
    bonitaVersions.each {
        add "config_$it", "org.bonitasoft.engine:bonita-home:${overridedVersions.containsKey(it) ? overridedVersions.get(it) : it}@zip"
    }
    drivers group: 'org.postgresql', name: 'postgresql', version: '9.3-1102-jdbc41'
    //drivers group: 'mysql', name: 'mysql-connector-java', version: '5.1.26'

}


database {
    dbvendor = System.getProperty("db.vendor", "postgres")
    dburl = System.getProperty("db.url","jdbc:postgresql://localhost:5432/migration");
    dbuser=System.getProperty("db.user","bonita")
    dbpassword=System.getProperty("db.password", "bpm")
    dbdriverClass=System.getProperty("db.driverClass","org.postgresql.Driver")
    dbRootUser = System.getProperty("db.root.user","postgres")
    dbRootPassword = System.getProperty("db.root.password","admin")
    classpath = configurations.drivers
}

task putMigrationPathsInDist << {
    //new File(projectDir, 'src/main/dist/bin/migration_paths').write(bonitaVersions.toString())
}
task addBonitaHomes(type: Copy) {
    from {
        bonitaVersions.collect {
            def conf = configurations."config_$it"
            conf.files[0].getAbsolutePath()
        }
    }
    into new File(buildDir, 'homes')
}


distributions {
    main {
        contents {
            from('build/homes') {
                into "bonita-home"
            }
        }
    }
}
tasks.addBonitaHomes.dependsOn tasks.putMigrationPathsInDist
tasks.distZip.dependsOn tasks.addBonitaHomes
/*
    TODO prepare test resource: create the installation with the source version
    clean and create the database
    unpack the source bonita home
    start an engine in source version
    launch the classes to execute processes in source version
 */

task unpackBonitaHomeSource << {
    println "TODO"
}
tasks.unpackBonitaHomeSource.dependsOn tasks.addBonitaHomes
/*
    Migration from source to target version
 */

task migrate(type: JavaExec) {
    main = "org.bonitasoft.migration.core.Migration"
    classpath = sourceSets.main.runtimeClasspath
}
tasks.migrate.dependsOn tasks.unpackBonitaHomeSource
tasks.migrate.dependsOn {
    rootProject.subprojects.find { it.name.equals("migration_" + source.replace('.', '_')) }.tasks.setupSourceEngine
}

task testMigration {

}
tasks.testMigration.dependsOn {
    rootProject.subprojects.find { it.name.equals("migration_" + target.replace('.', '_')) }.tasks.test
}
tasks.testMigration.dependsOn tasks.migrate
tasks.testMigration.dependsOn tasks.distZip


