/**
 * Copyright (C) 2021 Bonitasoft S.A.
 * BonitaSoft, 32 rue Gustave Eiffel - 38000 Grenoble
 * This library is free software; you can redistribute it and/or modify it under the terms
 * of the GNU Lesser General Public License as published by the Free Software Foundation
 * version 2.1 of the License.
 * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 * You should have received a copy of the GNU Lesser General Public License along with this
 * program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth
 * Floor, Boston, MA 02110-1301, USA.
 **/
package org.bonitasoft.migration.version.to7_13_0

import org.bonitasoft.migration.DBUnitHelper
import org.bonitasoft.migration.core.MigrationContext
import spock.lang.Shared
import spock.lang.Specification
/**
 * @author Emmanuel Duchastenier
 */
class UpdateExistingFinalPagesIT extends Specification {

    @Shared
    DBUnitHelper dbUnitHelper = DBUnitHelper.getInstance()
    @Shared
    MigrationContext migrationContext = dbUnitHelper.context

    private UpdatePageSchema updatePageSchema = new UpdatePageSchema()
    private UpdateExistingFinalPages migrationStep = new UpdateExistingFinalPages()

    def setup() {
        dropTestTables()
        // PAGE table is the same, so reusing 7_9_0 SQL resource files:
        dbUnitHelper.createTables("7_9_0/page", "page")
    }

    def cleanup() {
        dropTestTables()
    }

    private String[] dropTestTables() {
        dbUnitHelper.dropTables(["page"] as String[])
    }


    def "should update all final pages with flags to false"() {
        given:
        def pages = ['custompage_themeBonita', 'custompage_caseoverview', 'custompage_layoutBonita', 'custompage_adminApplicationDetailsBonita',
                     'custompage_adminApplicationListBonita', 'custompage_adminBDMBonita', 'custompage_adminCaseListBonita', 'custompage_adminCaseVisuBonita',
                     'custompage_adminInstallExportOrganizationBonita', 'custompage_adminLicenseBonita', 'custompage_adminMonitoringBonita',
                     'custompage_adminProcessDetailsBonita', 'custompage_adminProcessVisuBonita', 'custompage_adminUserDetailsBonita', 'custompage_home',
                     'custompage_tenantStatusBonita', 'custompage_processAutogeneratedForm', 'custompage_taskAutogeneratedForm']
        def i = 0
        byte[] content = "myValue".getBytes()
        for (String page: pages) {
            migrationContext.sql.execute("""
insert into page(tenantId , id, name, displayName, description, installationDate, installedBy, provided, lastModificationDate, lastUpdatedBy, contentName, content, contentType, processDefinitionId)
values (1, ${++i}, ${page}, 'page 1', 'my first page', 1, 1, ${dbUnitHelper.falseValue()}, 1, 1, 'a page', $content, 'a content', 1)
""")
        }
        // insert another page that should not be updated:
        migrationContext.sql.execute("""
insert into page(tenantId , id, name, displayName, description, installationDate, installedBy, provided, lastModificationDate, lastUpdatedBy, contentName, content, contentType, processDefinitionId)
values (1, 292, 'custompage_shouldNotBeDeleted', 'page 1', 'my first page', 1, 1, ${dbUnitHelper.falseValue()}, 1, 1, 'a page', $content, 'a content', 1)
""")
        assert 19 == migrationContext.sql.firstRow("SELECT count(id) FROM page") [0]

        when:
        // we need to have
        updatePageSchema.execute(migrationContext)
        migrationStep.execute(migrationContext)

        then:
        // all but one lines should have been updated:
        18 == migrationContext.sql.firstRow("SELECT count(id) FROM page WHERE removable = ${dbUnitHelper.falseValue()} AND editable = ${dbUnitHelper.falseValue()}") [0]

    }
}
