/**
 * Copyright (C) 2020 BonitaSoft S.A.
 * BonitaSoft, 32 rue Gustave Eiffel - 38000 Grenoble
 * This library is free software; you can redistribute it and/or modify it under the terms
 * of the GNU Lesser General Public License as published by the Free Software Foundation
 * version 2.1 of the License.
 * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 * You should have received a copy of the GNU Lesser General Public License along with this
 * program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth
 * Floor, Boston, MA 02110-1301, USA.
 **/

package org.bonitasoft.migration.core

/**
 * @author Danila Mazour
 */
class UpdateV6CaseOverview implements MigrationAction {

    List<VersionMigration> migrationVersions
    MigrationContext context
    Logger logger
    DisplayUtil displayUtil
    Long processDefinition
    String processName = ""
    String processVersion = ""
    Long tenantId
    Long mappingId

    private static final String UPDATE_CASE_OVERVIEW_PAGE_MAPPINGS = """UPDATE page_mapping
SET pageid = (SELECT id FROM page WHERE NAME = 'custompage_caseoverview' AND tenantid = ?),
    urladapter = null,
    page_authoriz_rules = 'IS_ADMIN,IS_PROCESS_OWNER,IS_PROCESS_INITIATOR,IS_TASK_PERFORMER,IS_INVOLVED_IN_PROCESS_INSTANCE,'
WHERE urladapter = 'legacy'
AND id = ?
AND tenantId = ?
AND key_ like 'processInstance/%'""" // KEY_ like 'processInstance/%' means 'case overview'

    private static final String UPDATE_CASE_OVERVIEW_FORM_MAPPINGS = """UPDATE form_mapping SET target = 'INTERNAL' WHERE type = 2 AND target = 'LEGACY' AND process = ? AND tenantid = ?"""

    private static final String GET_IDS = """SELECT f.page_mapping_tenant_id, f.page_mapping_id FROM form_mapping f where f.type = 2 and f.PROCESS = ?"""

    private static final String GET_NAME_AND_VERSION_FROM_ID = """SELECT p.name, p.version from process_definition p where p.processid = ? and p.tenantid = ?"""

    @Override
    void run(boolean isSp) {
        if (getMappingIdAndTenantId()) {
            getProcessNameAndVersion()
            displayWarningBeforeOperation()
            def hasUpdatedSomeRows = updateV6CaseOverviews()
            displayWarningAfterOperation(hasUpdatedSomeRows)
        }
    }

    boolean getMappingIdAndTenantId() {
        def ids = context.sql.rows(GET_IDS, processDefinition)
        if (ids != null && !ids.empty) {
            mappingId = ids.get(0).page_mapping_id
            tenantId = ids.get(0).page_mapping_tenant_id
            return true
        } else {
            logger.error("The process definition with Id : ${processDefinition} does not exist on the current platform, please set a valid process definition id. NO CHANGES WERE MADE.")
            return false
        }
    }

    private void getProcessNameAndVersion() {
        def nameAndVersion = context.sql.rows(GET_NAME_AND_VERSION_FROM_ID, processDefinition, tenantId)
        processName = nameAndVersion.get(0).name
        processVersion = nameAndVersion.get(0).version
    }

    private void displayWarningBeforeOperation() {
        String[] warning = ["This action will replace the V6 case overview by autogenerated V7 case overview of the following process definition:",
                            "id: ${processDefinition}",
                            "name: ${processName}",
                            "version: ${processVersion}",
                            "tenant Id: ${tenantId}",
                            "Once migrated, this autogenerated V7 case overview can be updated with a custom case overview (v7)",
                            "The purpose is to allow the migration of non-disabled processes, with functionally non-blocking V6 forms present"]
        displayUtil.logWarningsInRectangleWithTitle("Updating Case Overview", warning)
        displayUtil.logInfoCenteredInRectangle("!!! THERE IS NO ROLLBACK POSSIBLE FOR THIS OPERATION !!!")
        MigrationUtil.askIfWeContinue()
    }

    boolean updateV6CaseOverviews() {
        def nbRowsUpdated = context.sql.executeUpdate(UPDATE_CASE_OVERVIEW_PAGE_MAPPINGS, tenantId, mappingId, tenantId)
        nbRowsUpdated += context.sql.executeUpdate(UPDATE_CASE_OVERVIEW_FORM_MAPPINGS, processDefinition, tenantId)
        return nbRowsUpdated != 0
    }

    private void displayWarningAfterOperation(boolean hasFoundSomethingToUpdate) {
        String[] output
        if (hasFoundSomethingToUpdate) {
            output = ["The replacement of the case overview by autogenerated V7 case overview has succeeded for the following process:",
                      "id: ${processDefinition}",
                      "name: ${processName}",
                      "version: ${processVersion}",
                      "tenant Id: ${tenantId}"]
        }
        else {
            output = ["Warning: No old V6 case overview to replace has been found for the following process:",
                      "id: ${processDefinition}",
                      "name: ${processName}",
                      "version: ${processVersion}",
                      "tenant Id: ${tenantId}",
                      "NOTHING HAS BEEN UPDATED!"]
        }
        displayUtil.logWarningsInRectangleWithTitle("Update of Case Overview", output)
    }

    @Override
    List<String> getBannerAndGlobalWarnings() {
        return [
                "The migration tool was executed using 'updateCaseOverview' option,",
                "it will update the V6 case overview to autogenerated V7 case overview of a given process,",
                "allowing to migrate to Bonita 7.8.0+",
                "NO OTHER CHANGES WILL BE MADE.",
                "",
                "Remove the 'updateCaseOverview' option to actually run the migration."]
    }

    @Override
    String getDescription() {
        return "Update all the V6 case overviews to autogenerated V7 case overviews for a given process."
    }
}
