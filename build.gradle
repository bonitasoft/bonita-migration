import com.github.zafarkhaja.semver.Version

import static pl.allegro.tech.build.axion.release.domain.PredefinedVersionIncrementer.versionIncrementerFor

buildscript {
    repositories {
        mavenCentral()
    }
    ext {
        logbackVersion = '1.2.3'
    }
}
plugins {
    id 'pl.allegro.tech.build.axion-release' version '1.7.1'

    // to be able to build Gradle task graph:
    // Run 'taskTree' to activate it.
    // Eg. './gradlew :bonita-migration-distrib:testMigration_7_8_1 :bonita-migration-distrib:taskTree -Ddb.vendor=oracle'
    id 'com.dorongold.task-tree' version '1.3.1'
}
repositories {
    mavenLocal()
    mavenCentral()
}

apply plugin: 'groovy'
apply plugin: 'application'
apply plugin: 'migration-dist'
apply plugin: 'migration'


configurations {
    inDistrib
}

scmVersion {
    tag { // Resulting tag will by x.y.z
        prefix = ''
        versionSeparator = ''
    }
    hooks {
        //change in the readme the version
        pre 'fileUpdate', [file: 'README.md', pattern: { v, p -> /$v/ }, replacement: { v, p -> "$v" }]
        pre 'fileUpdate', [file       : 'community/migration.properties', pattern: { v, p ->
            /currentVersionModifier=.*/
        },
                           replacement: { String v, p ->
                               def parsedVersion = Version.valueOf(v)
                               if (!parsedVersion.preReleaseVersion.isEmpty()) {
                                   return "currentVersionModifier=" + parsedVersion.preReleaseVersion
                               } else {
                                   return "currentVersionModifier=NONE"
                               }
                           }]
        // create a commit for the release
        pre 'commit', { v, p -> "chore(release): create release $v" }
    }
    tag {
        deserialize = { config, position, String tagName -> normalizeOldTagName(tagName) }
    }

    versionIncrementer { context ->
        def version = context.currentVersion
        if (project.hasProperty("release.maintenance")) {
            return versionIncrementerFor("incrementPatch").call(context)
        }
        if (project.hasProperty("release.minor")) {
            return versionIncrementerFor("incrementMinor").call(context)
        }
        if (project.hasProperty("release.major")) {
            return versionIncrementerFor("incrementMajor").call(context)
        }
        if (project.hasProperty("release.rc")) {
            return nextPreRelease(version, "rc")
        }
        if (project.hasProperty("release.alpha")) {
            return nextPreRelease(version, "alpha")
        }
        if (project.hasProperty("release.beta")) {
            return nextPreRelease(version, "beta")
        }
        if (version.preReleaseVersion.startsWith("rc")
                || version.preReleaseVersion.startsWith("alpha")
                || version.preReleaseVersion.startsWith("beta")) {
            return Version.valueOf("$version.majorVersion.$version.minorVersion.$version.patchVersion")
        }
        return versionIncrementerFor("incrementPatch").call(context)
    }
}

private static Version nextPreRelease(Version currentVersion, String suffix) {
    if (currentVersion.preReleaseVersion.startsWith(suffix)) {
        def currentPreReleaseNumber = Integer.valueOf(currentVersion.preReleaseVersion.substring(suffix.size() + 1))
        def nextNumber = String.format("%02d", currentPreReleaseNumber + 1)
        return Version.valueOf("$currentVersion.majorVersion.$currentVersion.minorVersion.$currentVersion.patchVersion-$suffix-$nextNumber")
    }
    return Version.valueOf("$currentVersion.majorVersion.$currentVersion.minorVersion.$currentVersion.patchVersion-$suffix-01")
}


private static String normalizeOldTagName(String tagName) {
    int dotCounter = 0
    char[] finalTag = new char[tagName.length()]
    for (int i = 0; i < tagName.length(); i++) {
        char c = tagName.chars[i]
        if (c == '.'.chars[0]) {
            dotCounter++
            if (dotCounter == 3) {
                c = '-'
            }
        }
        finalTag[i] = c
    }
    return new String(finalTag)
}

project.version = scmVersion.version

project.rootProject.allprojects {
    version = scmVersion.version
}

group 'org.bonitasoft.migration'

artifacts { archives distZip }

distTar.enabled = false

sourceCompatibility = 1.7
targetCompatibility = 1.7

dependencies {
    compile "org.codehaus.groovy:groovy-all:2.4.16"
    compile "com.github.zafarkhaja:java-semver:0.9.0"
    compile group: 'org.apache.commons', name: 'commons-dbcp2', version: '2.5.0'
    compile "ch.qos.logback:logback-classic:$logbackVersion"
    compile "commons-cli:commons-cli:1.4"
    compile "com.sun.activation:jakarta.activation:1.2.2"
    runtime 'javax.activation:activation:1.1'

    testRuntime "cglib:cglib-nodep:2.2"
    testRuntime 'org.objenesis:objenesis:1.2'
    testCompile 'org.assertj:assertj-core:3.12.2'
    testCompile('org.dbunit:dbunit:2.5.1')
    testCompile "org.spockframework:spock-core:1.0-groovy-2.4"
    testCompile 'xmlunit:xmlunit:1.5'

    // TODO should be fillerRuntime (require changed in tasks)
    fillerCompile "ch.qos.logback:logback-classic:$logbackVersion"
    fillerCompile 'junit:junit:4.11'
    fillerCompile "org.codehaus.groovy:groovy-all:2.4.11"
    fillerCompile 'org.awaitility:awaitility:3.0.0'
    fillerCompile 'org.assertj:assertj-core:3.12.2'

    enginetestCompile 'org.awaitility:awaitility:3.0.0'
    enginetestCompile 'org.assertj:assertj-core:3.12.2'
    enginetestCompile group: 'junit', name: 'junit', version: '4.11'
    enginetestCompile("org.spockframework:spock-core:1.0-groovy-2.4") {
        exclude module: "groovy-all"
    }
    enginetestCompile "org.codehaus.groovy:groovy-all:2.4.11"
    // TODO should be enginetestRuntime (require changed in tasks)
    enginetestCompile "ch.qos.logback:logback-classic:$logbackVersion"
}

startScripts {
    // Fail on windows OS
    // classpath = files('$APP_HOME/lib/*')
    // Workaround inspired of https://gist.github.com/jlmelville/2bfe9277e9e2c0ff79b6
    // and http://stackoverflow.com/questions/25227198/how-to-pass-a-reference-to-distribution-home-directory-using-gradle-application
    doLast {
        windowsScript.text = windowsScript.text.replaceFirst('(set CLASSPATH=%APP_HOME%\\\\lib\\\\).*', '$1*')
        unixScript.text = unixScript.text.replaceFirst('(CLASSPATH=\\$APP_HOME/lib/).*', '$1*')
    }
}

sourceSets {
    intTest {
        compileClasspath += sourceSets.test.compileClasspath
    }
}

task("testJar", type: Jar) {
    classifier = 'tests'
    from sourceSets.test.output + sourceSets.intTest.output
}

processResources {
    filesMatching('**/bonita-migration-info.properties') {
        expand(
                'project_version': project.property('version'),
        )
    }
}


distributions {
    main {
        contents {
            includeEmptyDirs = false
            configurations.inDistrib.resolvedConfiguration.resolvedArtifacts.each {
                from(zipTree(it.file)) {
                    include '**'
                    eachFile { fcp ->
                        //unzip each artifact and put them in subfolder 'tools'
                        fcp.path = fcp.path.replaceAll("([^/]*)/([^/]*)-${project.version}/", "\$1/tools/\$2/")
                    }
                }
            }
        }
    }
}


tasks.distZip.dependsOn configurations.inDistrib