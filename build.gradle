apply plugin: 'groovy'
apply plugin: 'application'


version = '2.0.0-SNAPSHOT'
mainClassName = "org.bonitasoft.migration.core.Migration"


def String[] bonitaVersions = [
        '6.5.2',
        '7.0.0-SNAPSHOT'
]
def source = System.getProperty("source.version", bonitaVersions[bonitaVersions.size() - 2])
def target = System.getProperty("target.version", bonitaVersions.last())
println "source = $source"
println "target = $target"

configurations {
    filler
    bonitaVersions.collect { "config_$it" }.each {create it}
}

repositories {
    mavenLocal()
    def customMavenRepo = System.getProperty("maven.repository")
    //used in jenkins: add in system property $ {JENKINS_HOME}/userContent/m2_repo and archiva
    if (customMavenRepo != null) {
        println "using custom maven.repository: " + customMavenRepo
        maven { url customMavenRepo }
    }
    mavenCentral()
}
dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.3.10'
    filler "org.bonitasoft.engine:bonita-client:${source}"
    filler "org.bonitasoft.engine:bonita-home:${source}"
    testCompile 'junit:junit:4.12'
    testCompile "org.bonitasoft.engine:bonita-client:${target}"
    bonitaVersions.each {
        add "config_$it", "org.bonitasoft.engine:bonita-home:$it@zip"
    }

}
/*
    TODO prepare sources:
    put the version list in the sources
    add all bonita homes
 */
task putMigrationPathsInDist << {
    println "TODO"
}
task addBonitaHomes(type: Copy) {
    from {
        bonitaVersions.collect {
            def conf = configurations."config_$it"
            conf.files[0].getAbsolutePath()
        }
    }
    //TODO add it in the real dist
    into 'build/distributions'

}
tasks.addBonitaHomes.dependsOn tasks.putMigrationPathsInDist
tasks.distZip.dependsOn tasks.addBonitaHomes
/*
    TODO prepare test resource: create the installation with the source version
    clean and create the database
    unpack the source bonita home
    start an engine in source version
    launch the classes to execute processes in source version
 */

task cleanAndCreateDatabase << {
    println "TODO"
}
tasks.cleanAndCreateDatabase.dependsOn tasks.addBonitaHomes
task unpackBonitaHomeSource << {
    println "TODO"
}
tasks.unpackBonitaHomeSource.dependsOn tasks.cleanAndCreateDatabase
task runEngineSource << {
    println "TODO"
}
tasks.runEngineSource.dependsOn tasks.unpackBonitaHomeSource
/*
    Migration from source to target version
 */

task migrate( type: JavaExec) {
    main = "org.bonitasoft.migration.core.Migration"
    classpath = sourceSets.main.runtimeClasspath
}
tasks.migrate.dependsOn tasks.runEngineSource

tasks.test.dependsOn tasks.migrate
tasks.test.dependsOn tasks.distZip

/*
    TODO Test, compile only what is necessary
 */
