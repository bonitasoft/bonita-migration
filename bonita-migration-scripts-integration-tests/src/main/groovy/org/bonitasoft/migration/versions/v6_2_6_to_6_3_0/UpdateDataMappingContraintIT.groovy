package org.bonitasoft.migration.versions.v6_2_6_to_6_3_0
;

import static org.assertj.core.api.Assertions.assertThat
import static org.junit.Assert.*
import groovy.sql.Sql
import groovy.xml.StreamingMarkupBuilder

import org.dbunit.JdbcDatabaseTester
import org.dbunit.assertion.DbUnitAssert
import org.dbunit.dataset.xml.FlatXmlDataSet


class UpdateDataMappingContraintIT extends GroovyTestCase {
    

    final static CREATE_DATA_MAPPING_6_1_2_TABLE
    final static CREATE_DATA_MAPPING_6_2_0_TABLE
    final static DATA_SET
    
    final static String DBVENDOR

    static{
        DBVENDOR = System.getProperty("db.vendor");
        CREATE_DATA_MAPPING_6_1_2_TABLE = UpdateDataMappingContraintIT.class.getClassLoader().getResource("sql/v6_1_2/${DBVENDOR}-create-data-mapping.sql");
        CREATE_DATA_MAPPING_6_2_0_TABLE = UpdateDataMappingContraintIT.class.getClassLoader().getResource("sql/v6_2_0/${DBVENDOR}-create-data-mapping.sql");

        DATA_SET = dataSet {
            data_mapping tenantid:1, id:1 , containerId:1, containerType:'processs', dataName:'a', dataInstanceId:1
            data_mapping tenantid:2, id:2 , containerId:2, containerType:'processs', dataName:'a', dataInstanceId:2
        }
    }

    JdbcDatabaseTester tester
    Sql sql

    @Override
    void setUp() {
        String driverClass =  System.getProperty("jdbc.driverClass")

        def config = [
            System.getProperty("jdbc.url"),
            System.getProperty("jdbc.user"),
            System.getProperty("jdbc.password")
        ]
        sql = Sql.newInstance(*config, driverClass);
        tester = new JdbcDatabaseTester(driverClass, *config)
    }

    @Override
    void tearDown() {
        tester.onTearDown()
        sql.execute("drop table data_mapping")
    }

    void test_can_migrate_a_database_6_1_2() {
        migrateAndCheck(CREATE_DATA_MAPPING_6_1_2_TABLE, true)
    }
    
    void test_can_migrate_a_database_6_2_0() {
        migrateAndCheck(CREATE_DATA_MAPPING_6_2_0_TABLE, false)
    }

    private migrateAndCheck(schema, boolean expectedMigration) {
        //given
        sql.execute(schema.text);
        tester.dataSet = DATA_SET
        tester.onSetup();

        //when
        //build/dist is the path generated by gradle in bonita-migration-integration-tests. How to improove it
        def feature = new File("build/dist/versions/6.3.0/Database/008_BS-296")
        boolean migrated = new UpdateDataMappingContraint(sql:sql, dbvendor:DBVENDOR, feature:feature).migrate()

        //then
        assertThat(migrated).isEqualTo(expectedMigration);
        def result;
        UpdateDataMappingContraintIT.class.getClassLoader().getResource("sql/v6_1_2/${DBVENDOR}-check-constraint.sql").withInputStream { stream ->
            result = sql.rows(stream.text);
        }
        
        if("oracle".equals(DBVENDOR) || "sqlserver".equals(DBVENDOR)) {
            assertThat(result.size()).isEqualTo(4);
        } else {
            assertThat(result).isNotNull();
        }

        def dataMappingContent = tester.connection.createDataSet("data_mapping");
        new DbUnitAssert().assertEquals(DATA_SET, dataMappingContent)
    }

    def static dataSet(data) {
        new FlatXmlDataSet(new StringReader(new StreamingMarkupBuilder().bind{dataset data}.toString()))
    }
}
